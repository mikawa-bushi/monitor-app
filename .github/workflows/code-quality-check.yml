name: Code Quality Check

on:
  push:
    branches: [ '**' ]  # All branches
  pull_request:
    branches: [ '**' ]  # All target branches

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install requests

    - name: Check commit message language
      run: |
        python << 'EOF'
        import subprocess
        import sys
        import re

        def is_english_commit_message(message):
            """Check if commit message is primarily in English using Unicode patterns"""
            # Remove common patterns that might interfere with language detection
            clean_message = message
            
            # Remove URLs
            clean_message = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', clean_message)
            
            # Remove file paths
            clean_message = re.sub(r'[a-zA-Z0-9_\-./]+\.(py|js|html|css|md|yml|yaml|json|txt)', '', clean_message)
            
            # Remove version numbers and technical identifiers
            clean_message = re.sub(r'\b\d+\.\d+\.\d+\b', '', clean_message)
            clean_message = re.sub(r'\b[a-f0-9]{7,40}\b', '', clean_message)
            
            # Remove common git/GitHub patterns
            patterns_to_remove = [
                r'ü§ñ Generated with \[Claude Code\].*',
                r'Co-Authored-By: .*',
                r'#\d+',  # Issue numbers
                r'@\w+',  # Mentions
            ]
            
            for pattern in patterns_to_remove:
                clean_message = re.sub(pattern, '', clean_message, flags=re.IGNORECASE)
            
            # Remove extra whitespace
            clean_message = ' '.join(clean_message.split())
            
            # Skip if message is too short
            if len(clean_message.strip()) < 5:
                return True  # Assume very short messages are OK
            
            # Check for non-English Unicode characters
            japanese_pattern = re.compile(r'[\u3040-\u309f\u30a0-\u30ff\u4e00-\u9faf]')
            chinese_pattern = re.compile(r'[\u4e00-\u9fff]')
            korean_pattern = re.compile(r'[\uac00-\ud7af]')
            cyrillic_pattern = re.compile(r'[\u0400-\u04ff]')
            arabic_pattern = re.compile(r'[\u0600-\u06ff]')
            
            # If we find non-English characters, it's likely not English
            if (japanese_pattern.search(clean_message) or 
                chinese_pattern.search(clean_message) or 
                korean_pattern.search(clean_message) or
                cyrillic_pattern.search(clean_message) or
                arabic_pattern.search(clean_message)):
                return False
            
            # Check ASCII ratio - English should be mostly ASCII
            ascii_chars = sum(1 for c in clean_message if ord(c) < 128)
            total_chars = len(clean_message)
            
            if total_chars == 0:
                return True
                
            ascii_ratio = ascii_chars / total_chars
            
            # If less than 80% ASCII, probably not English
            return ascii_ratio >= 0.8

        def get_commit_messages():
            """Get commit messages from the current PR or push"""
            try:
                if '${{ github.event_name }}' == 'pull_request':
                    # For PR, get commits between base and head
                    base_sha = '${{ github.event.pull_request.base.sha }}'
                    head_sha = '${{ github.event.pull_request.head.sha }}'
                    cmd = f'git log --pretty=format:"%s" {base_sha}..{head_sha}'
                else:
                    # For push, get commits from the push
                    before_sha = '${{ github.event.before }}'
                    after_sha = '${{ github.event.after }}'
                    
                    # Handle initial commit case
                    if before_sha == '0000000000000000000000000000000000000000':
                        cmd = f'git log --pretty=format:"%s" {after_sha} -n 10'
                    else:
                        cmd = f'git log --pretty=format:"%s" {before_sha}..{after_sha}'
                
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                if result.returncode != 0:
                    print(f"Error getting commit messages: {result.stderr}")
                    return []
                
                messages = [msg.strip() for msg in result.stdout.strip().split('\n') if msg.strip()]
                return messages
                
            except Exception as e:
                print(f"Error in get_commit_messages: {e}")
                return []

        def main():
            commit_messages = get_commit_messages()
            
            if not commit_messages:
                print("No commit messages found or error occurred. Skipping check.")
                return 0
            
            print(f"Checking {len(commit_messages)} commit message(s)...")
            
            failed_messages = []
            
            for i, message in enumerate(commit_messages, 1):
                print(f"\n--- Commit {i} ---")
                print(f"Message: {message}")
                
                if not is_english_commit_message(message):
                    print("‚ùå FAIL: This commit message appears to be in a non-English language")
                    failed_messages.append(message)
                else:
                    print("‚úÖ PASS: This commit message appears to be in English")
            
            if failed_messages:
                print(f"\n‚ùå FAILURE: {len(failed_messages)} commit message(s) failed the English language check:")
                for msg in failed_messages:
                    print(f"  - {msg}")
                print("\nüìù Please ensure all commit messages are written in English.")
                print("üí° You can amend your commit message with: git commit --amend -m \"Your English message\"")
                return 1
            else:
                print(f"\n‚úÖ SUCCESS: All {len(commit_messages)} commit messages are in English!")
                return 0

        sys.exit(main())
        EOF

    - name: Comment on PR (if failed)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üåê Commit Message Language Check Failed

          One or more commit messages in this PR are not in English. 

          **Why English commit messages?**
          - Maintains consistency for international contributors
          - Improves project accessibility for global users
          - Aligns with our internationalization efforts

          **How to fix:**
          1. Use \`git rebase -i\` to edit commit messages
          2. Or amend the most recent commit: \`git commit --amend -m "Your English message"\`
          3. Force push the changes: \`git push --force-with-lease\`

          **Examples of good commit messages:**
          - \`Add user authentication feature\`
          - \`Fix database connection timeout issue\`
          - \`Update API documentation for v2 endpoints\`

          Please update your commit messages to English and push the changes.`
          })

  code-formatting:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Check code formatting with Black
      run: |
        echo "Running Black formatter check..."
        if poetry run which black >/dev/null 2>&1; then
          poetry run black --check --diff .
          if [ $? -ne 0 ]; then
            echo "‚ùå Code formatting check failed. Run 'poetry run black .' to fix formatting."
            exit 1
          else
            echo "‚úÖ Code formatting check passed."
          fi
        else
          echo "Black not available in dependencies, installing temporarily..."
          poetry add --dev black
          poetry run black --check --diff .
          if [ $? -ne 0 ]; then
            echo "‚ùå Code formatting check failed. Run 'poetry run black .' to fix formatting."
            exit 1
          else
            echo "‚úÖ Code formatting check passed."
          fi
        fi

    - name: Comment on PR (if formatting failed)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üé® Code Formatting Check Failed

          The code in this PR doesn't follow the Black formatting standards.

          **How to fix:**
          1. Install Black if not already installed: \`poetry add --dev black\`
          2. Run the formatter: \`poetry run black .\`
          3. Commit the formatting changes: \`git add . && git commit -m "Format code with Black"\`
          4. Push the changes: \`git push\`

          **Why consistent formatting?**
          - Improves code readability and maintainability
          - Reduces merge conflicts related to style differences
          - Follows Python community best practices

          The CI will pass once the code is properly formatted.`
          })